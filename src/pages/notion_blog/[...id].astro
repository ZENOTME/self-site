---
import { getNotionPage, getNotionPageContent } from "../../notion";
import type {
	PageObjectResponse,
	RichTextItemResponse,
} from "@notionhq/client/build/src/api-endpoints";
import NotionBlogPost from "../../layouts/NotionBlogPost.astro";

export const prerender = false;

const { id } = Astro.params;

let page: PageObjectResponse = (await getNotionPage(
	id as string,
)) as PageObjectResponse;
let content = await getNotionPageContent(id as string);
const title = (
	page.properties["title"] as {
		type: "title";
		title: Array<RichTextItemResponse>;
		id: string;
	}
).title[0].plain_text;
let create_date: Date | null = null;
if (page.properties["date"].type == "date") {
	create_date = new Date(page.properties["date"].date?.start as string);
}
let hero_image: string | null = null;
if (
	"featured image" in page.properties &&
	page.properties["featured image"].type == "files" &&
	page.properties["featured image"].files?.length > 0 &&
	page.properties["featured image"].files[0].type == "file" && 
	page.properties["featured image"].files[0].file.url
) {
	const imageUrl = page.properties["featured image"].files[0].file.url;
	// 下载图片并转换为base64
	const response = await fetch(imageUrl);
	const buffer = await response.arrayBuffer();
	hero_image = `data:${response.headers.get('content-type')};base64,${Buffer.from(buffer).toString('base64')}`;
}
let tags: string[] | null = null;
if (
	"tags" in page.properties &&
	page.properties["tags"].type == "multi_select" 
) {
	tags = page.properties["tags"].multi_select.map(item => item.name);
}
---

<NotionBlogPost
	title={title}
	description=""
	pubDate={create_date}
	heroImage={hero_image}
	tags={tags}
>
	<article set:html={content} />
</NotionBlogPost>
